import { readFileSync, writeFileSync } from 'fs'


const packageJson = JSON.parse(readFileSync('package.json', 'utf8'))
const languages = packageJson.build.mac.electronLanguages

const masterLines = readFileAsLines('src/common/i18n/text_en.ts')

const msgLineRegex = /^( *)([^ :]+): *(['"`].*?['"`]),? *$/

const stats = { info: 'Generated by src/script/check-i18n.mjs', total: 0, missing: {} }

for (const language of languages) {
    if (language === 'en') {
        stats.missing.en = 0
        console.log(`${language}: OK`)
        continue
    }

    const languageFile = `src/common/i18n/text_${language}.ts`
    const lines = readFileAsLines(languageFile)
    const msgByKey = {}
    for (const line of lines) {
        const match = msgLineRegex.exec(line)
        if (match) {
            msgByKey[match[2]] = match[3]
        }
    }

    let masterMsgCount = 0
    let missingMsgCount = 0
    const resultLines = []
    for (const line of masterLines) {
        const match = msgLineRegex.exec(line)
        if (match) {
            masterMsgCount++
            const indent = match[1]
            const key = match[2]
            const masterMsg = match[3]
            const msg = msgByKey[key]
            if (msg && msg.length > 2 && msg.indexOf('// TODO') === -1) {
                resultLines.push(`${indent}${key}: ${msg},`)
            } else {
                missingMsgCount++
                resultLines.push(`${indent}${key}: \`\`,  // TODO: ${masterMsg}`)
            }
        } else {
            resultLines.push(line)
        }
    }

    if (missingMsgCount) {
        writeFileSync(languageFile, resultLines.join('\n'))
        console.log(`${language}: ${missingMsgCount} / ${masterMsgCount} missing`)
    } else {
        console.log(`${language}: OK`)
    }

    if (!stats.total) {
        stats.total = masterMsgCount
    }
    stats.missing[language] = missingMsgCount
}

writeFileSync('src/common/i18n/i18n-stats.json', JSON.stringify(stats, null, 4))


function readFileAsLines(path) {
    return readFileSync(path, 'utf8').split(/\r?\n/)
}
